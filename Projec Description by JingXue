<html><head><title>Doc</title><meta content="text/html; charset=UTF-8" http-equiv="content-type"><style type="text/css">ol{margin:0;padding:0}.c5{border-bottom-width:1pt;border-top-style:solid;width:234pt;border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-bottom-style:solid;vertical-align:top;border-top-color:#000000;border-left-color:#000000;border-right-color:#000000;border-left-style:solid;border-right-width:1pt;border-left-width:1pt}.c0{border-bottom-width:1pt;border-top-style:solid;width:156pt;border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-bottom-style:solid;vertical-align:top;border-top-color:#000000;border-left-color:#000000;border-right-color:#000000;border-left-style:solid;border-right-width:1pt;border-left-width:1pt}.c2{vertical-align:baseline;color:#000000;font-size:11pt;font-style:normal;font-family:"Arial";text-decoration:none;font-weight:normal}.c10{line-height:1.15;padding-top:0pt;widows:2;orphans:2;text-align:left;direction:ltr;padding-bottom:0pt}.c4{line-height:1.0;padding-top:0pt;text-align:left;direction:ltr;padding-bottom:0pt}.c1{widows:2;orphans:2;height:11pt;direction:ltr}.c12{margin-right:auto;border-collapse:collapse}.c6{max-width:468pt;background-color:#ffffff;padding:72pt 72pt 72pt 72pt}.c11{widows:2;orphans:2;direction:ltr}.c13{color:inherit;text-decoration:inherit}.c9{color:#1155cc;text-decoration:underline}.c3{height:0pt}.c14{color:#ff0000}.c7{font-style:italic}.c8{height:11pt}.title{widows:2;padding-top:0pt;line-height:1.15;orphans:2;text-align:left;color:#000000;font-size:21pt;font-family:"Trebuchet MS";padding-bottom:0pt;page-break-after:avoid}.subtitle{widows:2;padding-top:0pt;line-height:1.15;orphans:2;text-align:left;color:#666666;font-style:italic;font-size:13pt;font-family:"Trebuchet MS";padding-bottom:10pt;page-break-after:avoid}li{color:#000000;font-size:11pt;font-family:"Arial"}p{color:#000000;font-size:11pt;margin:0;font-family:"Arial"}h1{widows:2;padding-top:10pt;line-height:1.15;orphans:2;text-align:left;color:#000000;font-size:16pt;font-family:"Trebuchet MS";padding-bottom:0pt;page-break-after:avoid}h2{widows:2;padding-top:10pt;line-height:1.15;orphans:2;text-align:left;color:#000000;font-size:13pt;font-family:"Trebuchet MS";font-weight:bold;padding-bottom:0pt;page-break-after:avoid}h3{widows:2;padding-top:8pt;line-height:1.15;orphans:2;text-align:left;color:#666666;font-size:12pt;font-family:"Trebuchet MS";font-weight:bold;padding-bottom:0pt;page-break-after:avoid}h4{widows:2;padding-top:8pt;line-height:1.15;orphans:2;text-align:left;color:#666666;font-size:11pt;text-decoration:underline;font-family:"Trebuchet MS";padding-bottom:0pt;page-break-after:avoid}h5{widows:2;padding-top:8pt;line-height:1.15;orphans:2;text-align:left;color:#666666;font-size:11pt;font-family:"Trebuchet MS";padding-bottom:0pt;page-break-after:avoid}h6{widows:2;padding-top:8pt;line-height:1.15;orphans:2;text-align:left;color:#666666;font-style:italic;font-size:11pt;font-family:"Trebuchet MS";padding-bottom:0pt;page-break-after:avoid}</style></head><body class="c6"><p class="c11"><span>What are the main parts of your project, algorithms, not easy concepts, anything important for people outside of INFSCI 2711 class to be able to continue your project</span></p><p class="c1"><span></span></p><p class="c1"><span></span></p><p class="c11"><span>Step1:</span></p><p class="c11"><span>First, we need to visit a relational database provided by the user and know the structure of the database through SQL queries. The main method can be found in</span><span class="c7">&nbsp;mySQL.java</span><span>. After that, we can know the database, table, column, record information. Meanwhile, we also need to know the Foreign Key (FK) in the database, so we the </span><span class="c7">FK.java</span><span>&nbsp;are used to find the Foreign Key.</span></p><p class="c1"><span></span></p><p class="c11"><span>Step2:</span></p><p class="c11"><span>After we have the access to the relational database, we need to import it into Neo4j, a graphic database system. (</span><span class="c9"><a class="c13" href="http://www.google.com/url?q=http%3A%2F%2Fneo4j.com%2F&amp;sa=D&amp;sntz=1&amp;usg=AFQjCNHocG5pw-kESCT9oqjfX0s9x46qHQ">http://neo4j.com/</a></span><span>) We rebuild the data structure into Neo4j. Our basic assumption is that there is no circle in the nodes of database.The main methods can be found in </span><span class="c7">SQL2neo4j.java</span><span>( main class to implement the methods in </span><span class="c7">Neo4j.java</span><span>) </span></p><p class="c1"><span></span></p><p class="c11"><span>There are 4 levels of the node label: record, column, table, database. The details are listed as follows:</span></p><p class="c1"><span></span></p><a href="#" name="e8d26a3777694723e35cc1cc023c622825c8e6b6"></a><a href="#" name="0"></a><table cellpadding="0" cellspacing="0" class="c12"><tbody><tr class="c3"><td class="c5" colspan="1" rowspan="1"><p class="c4"><span class="c2">node</span></p></td><td class="c5" colspan="1" rowspan="1"><p class="c4"><span class="c2">Property</span></p></td></tr><tr class="c3"><td class="c5" colspan="1" rowspan="1"><p class="c4"><span class="c2">database</span></p></td><td class="c5" colspan="1" rowspan="1"><p class="c4"><span class="c2">value(database name), type(database)</span></p></td></tr><tr class="c3"><td class="c5" colspan="1" rowspan="1"><p class="c4"><span class="c2">record</span></p></td><td class="c5" colspan="1" rowspan="1"><p class="c4"><span class="c2">value(record value), type(record)</span></p></td></tr><tr class="c3"><td class="c5" colspan="1" rowspan="1"><p class="c4"><span class="c2">column</span></p></td><td class="c5" colspan="1" rowspan="1"><p class="c4"><span class="c2">value(column name), type(record), parent (table name)</span></p></td></tr><tr class="c3"><td class="c5" colspan="1" rowspan="1"><p class="c4"><span class="c2">table</span></p></td><td class="c5" colspan="1" rowspan="1"><p class="c4"><span class="c2">value(table name), type(table), parent (database) </span></p></td></tr></tbody></table><p class="c1"><span></span></p><p class="c11"><span>There are 3 relational labels: belong to, link, path. The details are listed as follows:</span></p><p class="c1"><span></span></p><a href="#" name="cf57c4d0407c8629bb8376a5fc26594bd51bec75"></a><a href="#" name="1"></a><table cellpadding="0" cellspacing="0" class="c12"><tbody><tr class="c3"><td class="c0" colspan="1" rowspan="1"><p class="c4"><span class="c2">Relational Label</span></p></td><td class="c0" colspan="1" rowspan="1"><p class="c4"><span class="c2">Description</span></p></td><td class="c0" colspan="1" rowspan="1"><p class="c4"><span class="c2">Property</span></p></td></tr><tr class="c3"><td class="c0" colspan="1" rowspan="1"><p class="c4"><span class="c2">Belong to</span></p></td><td class="c0" colspan="1" rowspan="1"><p class="c4"><span class="c2">Record-(belong to)-Column</span></p><p class="c4"><span class="c2">Column-(belong to)-Table</span></p><p class="c4"><span class="c2">Table-(belong to)-Database</span></p></td><td class="c0" colspan="1" rowspan="1"><p class="c10"><span class="c2">RelationType: </span></p><p class="c10"><span class="c2">column-table</span></p><p class="c10"><span class="c2">record-column</span></p><p class="c10"><span class="c2">table-database</span></p></td></tr><tr class="c3"><td class="c0" colspan="1" rowspan="1"><p class="c4"><span class="c2">Link</span></p></td><td class="c0" colspan="1" rowspan="1"><p class="c4"><span class="c2">In the same database, if 2 columns have FK constraint.</span></p><p class="c4 c8"><span class="c2"></span></p><p class="c4"><span class="c2">In 2 different database, if 2 columns have the same name. </span></p></td><td class="c0" colspan="1" rowspan="1"><p class="c10"><span class="c2">RelationType</span></p><p class="c10"><span class="c2">PK-FK</span></p><p class="c10"><span class="c2">&nbsp;(same database column) </span></p><p class="c10"><span class="c2">SameNameCol</span></p><p class="c10"><span class="c2">(different database)</span></p></td></tr><tr class="c3"><td class="c0" colspan="1" rowspan="1"><p class="c4"><span class="c2">Path</span></p></td><td class="c0" colspan="1" rowspan="1"><p class="c4"><span class="c2">If 2 columns can be joined together, there is a path between 2 tables. &nbsp;</span></p></td><td class="c0" colspan="1" rowspan="1"><p class="c10"><span class="c2">RelationType: table.columnname </span></p><p class="c10"><span class="c14">cost</span><span class="c2">:</span></p><p class="c10"><span class="c2">same database=1</span></p><p class="c10"><span class="c2">different database=2</span></p><p class="c4 c8"><span class="c2"></span></p></td></tr></tbody></table><p class="c1"><span></span></p><p class="c11"><span>Step3:</span></p><p class="c11"><span>we need to search the data according to the query. This function is realized in </span><span class="c7">KeywordSearchDao.java. </span></p><p class="c1"><span></span></p><p class="c11"><span>Step4:</span></p><p class="c11"><span>For the joined the columns, we need to find the shortest path with minimum cost value among tables. To implement this method, we use the steiner Tree algorithm. (</span><span class="c9"><a class="c13" href="http://www.google.com/url?q=http%3A%2F%2Fen.wikipedia.org%2Fwiki%2FSteiner_tree_problem&amp;sa=D&amp;sntz=1&amp;usg=AFQjCNFF6b7Da78n4r_aE9SJ-lP-ckX-qw">http://en.wikipedia.org/wiki/Steiner_tree_problem</a></span><span>) This function is implement in </span><span class="c7">Join.java </span><span>(main function), </span><span class="c7">Kruskai.java</span><span>(find the shortest path between 2 nodes&#65289;/ </span><span class="c7">SteineerTree.java.</span></p><p class="c1"><span></span></p><p class="c1"><span></span></p><p class="c1"><span></span></p><p class="c1"><span></span></p><p class="c1"><span></span></p><p class="c1"><span></span></p><p class="c1"><span></span></p><p class="c1"><span></span></p><p class="c1"><span></span></p><p class="c1"><span></span></p><p class="c1"><span></span></p><p class="c1"><span></span></p><p class="c1"><span></span></p></body></html>